name: Nx Cloud Agents

on:
  workflow_call:
    inputs:
      number-of-agents:
        required: true
        type: number     
      install-commands:
        required: false
        type: string

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: true

jobs:
  set-agents:
    runs-on: ubuntu-latest
    name: Init
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        shell: bash
        run: |
          AGENTS_JSON_ARRAY=$(node -e "console.log(JSON.stringify(Array.from(new Array(${{ inputs.number-of-agents }})).map((_, i) => i + 1)));")
          echo $AGENTS_JSON_ARRAY
          echo "::set-output name=matrix::$AGENTS_JSON_ARRAY"

  Run:
    needs: set-agents
    runs-on: ubuntu-latest
    name: Agent ${{ matrix.agent }}
    strategy:
      matrix:
        agent:
          - ${{fromJson(needs.set-agents.outputs.matrix)}}
    defaults:
      run:
        working-directory: ${{ github.workspace }}
        shell: bash
    steps:
      - uses: actions/checkout@v2
        with:
            fetch-depth: 0

      - name: Get yarn cache directory path        
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use the node_modules cache if available [yarn]        
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-16-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-16-yarn-
      
      - name: Run any configured install-commands
        if: ${{ inputs.install-commands != '' }}
        run: |
          ${{ inputs.install-commands }}

      - name: Install dependencies        
        run: |
          echo "Running yarn install --frozen-lockfile"
          yarn install --frozen-lockfile
      
      - name: Start Nx Agent ${{ matrix.agent }}
        run: npx nx-cloud start-agent
        env:
          NX_AGENT_NAME: ${{matrix.agent}}
